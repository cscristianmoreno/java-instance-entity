package utils;

import annotations.IsRow;
import annotations.relations.OneToOne;
import annotations.types.Integer;
import annotations.types.PrimaryKey;
import annotations.types.Timestamp;
import annotations.types.Varchar;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;

public abstract class EntityUtil {
    
    /**
     * The function creates a SQL statement for adding a column to a table based on annotations in a
     * specified class.
     * 
     * @param clazz The `clazz` parameter is a Class object representing a class in Java. It is used to
     * retrieve information about the class, such as its fields and annotations.
     * @param row The `row` parameter in the `createStatementAddColumn` method represents the name of
     * the field (column) in the specified class (`clazz`) for which you want to create a SQL statement
     * to add a column to a database table.
     * @return The `createStatementAddColumn` method returns a SQL statement for adding a column to a
     * table based on the annotations present on the specified field in the given class. The SQL
     * statement is generated by iterating over the annotations of the field and calling the
     * `getTypeForAnnotation` method to determine the data type for the column based on the
     * annotations.
     */
    public static String createStatementAddColumn(final Class<?> clazz, final String row) throws Exception {
        Field field = clazz.getDeclaredField(row);

        String sql = new String();
        

        for (Annotation annotation: field.getAnnotations()) {
            if (!annotation.annotationType().
            isAnnotationPresent(IsRow.class)) {
                continue;
            }
            
            sql = getTypeForAnnotation(row, annotation);
        }

        return sql;
    }

    /**
     * The function `getTypeForAnnotation` determines the SQL type for a given annotation in Java based
     * on specific conditions.
     * 
     * @param row The `row` parameter represents the name of the column in a database table for which
     * you are determining the type based on the provided annotation.
     * @param annotation The `annotation` parameter in the `getTypeForAnnotation` method represents an
     * annotation that is used to define the type of a database column in a table. The method checks
     * the type of the annotation and returns the corresponding SQL type for the column based on the
     * annotation type. The method supports various annotations such
     * @return The method `getTypeForAnnotation` returns a String value based on the type of the
     * provided Annotation. The returned String represents the SQL type and constraints associated with
     * the given annotation.
     */
    private static String getTypeForAnnotation(final String row, final Annotation annotation) {
        if (annotation instanceof PrimaryKey) {
            return String.format("%s SERIAL PRIMARY KEY", row);
        }
        else if (annotation instanceof Varchar) {
            Varchar varchar = (Varchar) annotation;
            return String.format("%s VARCHAR(%d) NOT NULL %s", row, varchar.length(), 
            (varchar.unique()) ? "UNIQUE": "");
        }
        else if (annotation instanceof Integer) {
            Integer integer = (Integer) annotation; 
            return String.format("%s INTEGER NOT NULL", row, (integer.unique()) ? "UNIQUE": "");
        }
        else if (annotation instanceof Timestamp) {
            Timestamp timestamp = (Timestamp) annotation;
            return String.format("%s TIMESTAMP NOT NULL %s", row, 
            (timestamp.creationTimestamp()) ? "DEFAULT NOW()" : "");
        }
        else if (annotation instanceof OneToOne) {
            OneToOne oneToOne = (OneToOne) annotation;
            String tableName = oneToOne.entity().getSimpleName();
            return String.format("%s_id INTEGER UNIQUE REFERENCES %s(id)", 
            tableName, tableName);
        }

        return null;
    }
    
}
